Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6

Hint 1:
Think about how we can calculate the i-th number in the running sum from the (i-1)-th number.


## Cloning vs Filling
🔍 nums.clone() vs new int[nums.length] + ans[0] = nums[0]
1. Memory
Both approaches allocate a new array of the same size (O(n) memory), so there’s no memory advantage to either in terms of the array itself.

However:

nums.clone() copies every element immediately, costing O(n) in both time and memory bandwidth

new int[nums.length] followed by ans[0] = nums[0] only copies the first value explicitly, and the rest are filled with zeroes. You then build the array progressively in the loop

➡️ So, cloning copies the entire array up front, while the second approach avoids that up-front work.

2. Performance
In terms of CPU instructions:

nums.clone() is a native array copy, and it’s fast — but it still does a full copy, which is wasteful if you're going to overwrite most of the values anyway

new int[] + manual filling avoids copying and directly builds the desired result

➡️ So in tight loops or large arrays, avoiding .clone() is a micro-optimization that can make a measurable difference.

